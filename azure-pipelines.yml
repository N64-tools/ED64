# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include: ["master", "develop*", "release-*", "refs/tags/*" ]
  paths:
    exclude: [ "doc", "*.md", ".gitignore", "README.md" ]

pr:
  autoCancel: true

jobs:
- job: Windows_CMake_ROM
  pool:
    vmImage: 'windows-latest'

  steps:
  - script: |
      curl -LJO https://github.com/ninja-build/ninja/releases/download/v1.10.1/ninja-win.zip
    displayName: 'Get Ninja build'
    continueOnError: false
    
  - task: ExtractFiles@1
    inputs:
      archiveFilePatterns: 'ninja-win.zip' 
      destinationFolder: ED64-XIO/tools
      cleanDestinationFolder: false 
    displayName: 'Extract ninja build'
    #condition: ne(variables.GCC_CACHE_RESTORED, 'true')
    continueOnError: false  

  - script: |
      curl -L https://n64tools.blob.core.windows.net/binaries/N64-tools/mips64-gcc-toolchain/master/latest/gcc-toolchain-mips64-win64.zip --output gcc-toolchain-mips64-win64.zip
    displayName: 'Get GCC toolchain'
    continueOnError: false

  - task: ExtractFiles@1
    inputs:
      archiveFilePatterns: 'gcc-toolchain-mips64-win64.zip' 
      destinationFolder: ED64-XIO/toolchain/gcc-toolchain-mips64
      cleanDestinationFolder: false 
    displayName: 'Extract gcc-toolchain-mips64-win64'
    #condition: ne(variables.GCC_CACHE_RESTORED, 'true')
    continueOnError: false

  - script: |
      curl -L https://n64tools.blob.core.windows.net/binaries/N64-tools/libdragon/develop/latest/libdragon-win64.zip --output libdragon-win64.zip
    displayName: 'Get libdragon'
    continueOnError: false

  - task: ExtractFiles@1
    inputs:
      archiveFilePatterns: 'libdragon-win64.zip' 
      destinationFolder: ED64-XIO/toolchain/libdragon
      cleanDestinationFolder: false 
    displayName: 'Extract libdragon-win64'
    continueOnError: false

  - script: echo "##vso[task.prependpath]$(Build.SourcesDirectory)\ED64-XIO\tools"
    displayName: Tweak PATH for Ninja

    #not sure why this is needed, but fails if not there!
  - script: echo "##vso[task.prependpath]$(Build.SourcesDirectory)\ED64-XIO\toolchain\libdragon\tools"
    displayName: Tweak PATH for libdragon tools

  - task: CMake@1
    inputs:
      cmakeArgs:
        -G Ninja 
        -DCMAKE_TOOLCHAIN_FILE=$(Build.SourcesDirectory)/ED64-XIO/CMake/toolchain-libdragon.cmake
        -DTOOLCHAIN_PREFIX=$(Build.SourcesDirectory)/ED64-XIO/toolchain/gcc-toolchain-mips64
        -DLIBDRAGON_PREFIX=$(Build.SourcesDirectory)/ED64-XIO/toolchain/libdragon
        $(Build.SourcesDirectory)/ED64-XIO/
      workingDirectory: '$(Build.SourcesDirectory)/ED64-XIO/build'
    displayName: Set CMake Options

  - task: CMake@1
    inputs:
      cmakeArgs: '--build $(Build.SourcesDirectory)/ED64-XIO/build --target all --config Release'
      workingDirectory: '$(Build.SourcesDirectory)/ED64-XIO/build'
    displayName: Build with CMake

  - task: CopyFiles@2
    inputs:
      sourceFolder: $(Build.SourcesDirectory)/
      contents: 'build\*.v64' 
      targetFolder: $(Build.ArtifactStagingDirectory)
      flattenFolders: true
    displayName: 'Copy ROM'
    continueOnError: false

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'binaries' 
      publishLocation: 'Container'
    displayName: Publish Build Artifacts
    continueOnError: false

##############################
- job: Windows_USB_App

  pool:
    vmImage: 'windows-latest'
  
  steps:
    # Visual Studio build
    # Build with MSBuild and set the Visual Studio version property
    - task: VSBuild@1
      inputs:
        solution: '**\*.sln' 
        vsVersion: 'latest' # Optional. Options: latest, 16.0, 15.0, 14.0, 12.0, 11.0
        #msbuildArgs: # Optional
        #platform: # Optional
        #configuration: # Optional
        #clean: false # Optional
        #maximumCpuCount: false # Optional
        #restoreNugetPackages: false # Optional
        #msbuildArchitecture: 'x86' # Optional. Options: x86, x64
        #logProjectEvents: true # Optional
        #createLogFile: false # Optional
        #logFileVerbosity: 'normal' # Optional. Options: quiet, minimal, normal, detailed, diagnostic

    - task: CopyFiles@2
      inputs:
        sourceFolder: $(Build.SourcesDirectory)/
        contents: '*.exe' 
        targetFolder: $(Build.ArtifactStagingDirectory)
        flattenFolders: true
      displayName: 'Copy Application'
      continueOnError: false

    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: 'binaries/app' 
        publishLocation: 'Container'
      displayName: Publish Build Artifacts
      continueOnError: false
