# Only trigger when something useful happens
trigger:
  branches:
    include: ["master", "develop*", "release-*", "refs/tags/*" ]
  paths:
    exclude: [ "doc", "*.md", ".gitignore", "README.md" ]

# Dont build twice if the the branch is also a PR.
pr:
  autoCancel: true

# Generate jobs for parallel builds dependent on targets.
jobs:
  #Build the libdragon demo.
  #TODO: (requires work).
- job: Windows_libdragon_demo_rom
  pool:
    vmImage: 'windows-latest'

  steps:
  - script: |
      curl -LJO https://github.com/ninja-build/ninja/releases/download/v1.10.1/ninja-win.zip
    displayName: 'Get Ninja build'
    continueOnError: false
    
  - task: ExtractFiles@1
    inputs:
      archiveFilePatterns: 'ninja-win.zip' 
      destinationFolder: ED64-XIO/tools
      cleanDestinationFolder: false 
    displayName: 'Extract ninja build'
    continueOnError: false  

  - script: |
      curl -L https://n64tools.blob.core.windows.net/binaries/N64-tools/mips64-gcc-toolchain/master/latest/gcc-toolchain-mips64-win64.zip --output gcc-toolchain-mips64-win64.zip
    displayName: 'Get GCC toolchain'
    continueOnError: false

  - task: ExtractFiles@1
    inputs:
      archiveFilePatterns: 'gcc-toolchain-mips64-win64.zip' 
      destinationFolder: ED64-XIO/toolchain/gcc-toolchain-mips64
      cleanDestinationFolder: false 
    displayName: 'Extract gcc-toolchain-mips64-win64'
    continueOnError: false

  - script: |
      curl -L https://n64tools.blob.core.windows.net/binaries/N64-tools/libdragon/develop/latest/libdragon-win64.zip --output libdragon-win64.zip
    displayName: 'Get libdragon'
    continueOnError: false

  - task: ExtractFiles@1
    inputs:
      archiveFilePatterns: 'libdragon-win64.zip' 
      destinationFolder: ED64-XIO/toolchain/libdragon
      cleanDestinationFolder: false 
    displayName: 'Extract libdragon-win64'
    continueOnError: false

  - script: echo "##vso[task.prependpath]$(Build.SourcesDirectory)\ED64-XIO\tools"
    displayName: Tweak PATH for Ninja

    #not sure why this is needed, but fails if not there!
  - script: echo "##vso[task.prependpath]$(Build.SourcesDirectory)\ED64-XIO\toolchain\libdragon\tools"
    displayName: Tweak PATH for libdragon tools

  - task: CMake@1
    inputs:
      cmakeArgs:
        -G Ninja 
        -DCMAKE_TOOLCHAIN_FILE=$(Build.SourcesDirectory)/ED64-XIO/CMake/toolchain-libdragon.cmake
        -DTOOLCHAIN_PREFIX=$(Build.SourcesDirectory)/ED64-XIO/toolchain/gcc-toolchain-mips64
        -DLIBDRAGON_PREFIX=$(Build.SourcesDirectory)/ED64-XIO/toolchain/libdragon
        $(Build.SourcesDirectory)/ED64-XIO/
      workingDirectory: '$(Build.SourcesDirectory)/ED64-XIO/build'
    displayName: Set CMake Options

  - task: CMake@1
    inputs:
      cmakeArgs: '--build $(Build.SourcesDirectory)/ED64-XIO/build --target all --config Release'
      workingDirectory: '$(Build.SourcesDirectory)/ED64-XIO/build'
    displayName: Build with CMake

  - task: CopyFiles@2
    inputs:
      sourceFolder: $(Build.SourcesDirectory)/ED64-XIO/build
      contents: '*.v64' 
      targetFolder: $(Build.ArtifactStagingDirectory)/rom
      flattenFolders: true
    displayName: 'Copy ROM'
    continueOnError: false

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'binaries' 
      publishLocation: 'Container'
    displayName: Publish Build Artifacts
    continueOnError: false

##############################
# Build the .netCore 3.1 app for Windows 10.
- job: Windows_USB64_App_netcoreapp3_1

  pool:
    vmImage: 'windows-latest'

  variables:
    solution: '**/*.sln'
    project: '**/*.csproj'
    buildPlatform: 'Any CPU'
    buildConfiguration: 'Release'
  
  steps:

    - task: NuGetCommand@2
      inputs:
        restoreSolution: '$(solution)'

    - task: DotNetCoreCLI@2
      inputs:
        command: 'build'
        projects: '$(project)'
        arguments: '--configuration $(buildConfiguration) --framework netcoreapp3.1'
      displayName: 'build netcoreapp3.1 app'

    - task: CopyFiles@2
      inputs:
        sourceFolder: $(Build.SourcesDirectory)/usb64/usb64/bin/$(buildConfiguration)/netcoreapp3.1/
        contents: '**' 
        targetFolder: $(Build.ArtifactStagingDirectory)/usb64/netcoreapp3.1/
        flattenFolders: true
      displayName: 'Copy Application'
      continueOnError: false

    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: 'windows-binaries' 
        publishLocation: 'Container'
      displayName: Publish Build Artifacts
      continueOnError: false

##############################
# Build the .net5 app for Windows 10 and latest linux systems. (not yet compatible with latest azure pipeline).
# - job: Windows_USB64_App_net5

#   pool:
#     vmImage: 'windows-latest'

#   variables:
#     solution: '**/*.sln'
#     project: '**/*.csproj'
#     buildPlatform: 'Any CPU'
#     buildConfiguration: 'Release'
  
#   steps:

#     - task: NuGetCommand@2
#       inputs:
#         restoreSolution: '$(solution)'

#     - task: DotNetCoreCLI@2
#       inputs:
#         command: 'build'
#         projects: '$(project)'
#         arguments: '--configuration $(buildConfiguration) --framework net5'
#       displayName: 'build net5 app'

#     - task: CopyFiles@2
#       inputs:
#         sourceFolder: $(Build.SourcesDirectory)/usb64/usb64/bin/$(buildConfiguration)/net5/
#         contents: '**' 
#         targetFolder: $(Build.ArtifactStagingDirectory)/usb64/net5/
#         flattenFolders: true
#       displayName: 'Copy Application'
#       continueOnError: false

#     - task: PublishBuildArtifacts@1
#       inputs:
#         pathtoPublish: '$(Build.ArtifactStagingDirectory)'
#         artifactName: 'windows-binaries' 
#         publishLocation: 'Container'
#       displayName: Publish Build Artifacts
#       continueOnError: false

##############################
# Build the .net 4.5 app for Windows 7 and above.
- job: Windows_USB64_App_net45

  pool:
    vmImage: 'windows-latest'

  variables:
    solution: '**/*.sln'
    project: '**/*.csproj'
    buildPlatform: 'Any CPU'
    buildConfiguration: 'Release'
  
  steps:

    - task: NuGetCommand@2
      inputs:
        restoreSolution: '$(solution)'

    - task: DotNetCoreCLI@2
      inputs:
        command: 'build'
        projects: '$(project)'
        arguments: '--configuration $(buildConfiguration) --framework net45'
      displayName: 'build net45 app'

    - task: CopyFiles@2
      inputs:
        sourceFolder: $(Build.SourcesDirectory)/usb64/usb64/bin/$(buildConfiguration)/net45/
        contents: '**' 
        targetFolder: $(Build.ArtifactStagingDirectory)/usb64/net45/
        flattenFolders: true
      displayName: 'Copy Application'
      continueOnError: false

    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: 'windows-binaries' 
        publishLocation: 'Container'
      displayName: Publish Build Artifacts
      continueOnError: false

##############################
# Build the .net 4.0 app for Windows XP and above.
- job: Windows_USB64_App_net40

  pool:
    vmImage: 'windows-latest'

  variables:
    solution: '**/*.sln'
    project: '**/*.csproj'
    buildPlatform: 'Any CPU'
    buildConfiguration: 'Release'
  
  steps:

    - task: NuGetCommand@2
      inputs:
        restoreSolution: '$(solution)'

    - task: DotNetCoreCLI@2
      inputs:
        command: 'build'
        projects: '$(project)'
        arguments: '--configuration $(buildConfiguration) --framework net40'
      displayName: 'build net40 app'

    - task: CopyFiles@2
      inputs:
        sourceFolder: $(Build.SourcesDirectory)/usb64/usb64/bin/$(buildConfiguration)/net40/
        contents: '**' 
        targetFolder: $(Build.ArtifactStagingDirectory)/usb64/net40/
        flattenFolders: true
      displayName: 'Copy Application'
      continueOnError: false

    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: 'windows-binaries' 
        publishLocation: 'Container'
      displayName: Publish Build Artifacts
      continueOnError: false

##############################
# Build the .netcore 3.1 app for supported linux systems.
- job: Linux_USB64_App_netcoreapp3_1

  pool:
    vmImage: 'ubuntu-latest'

  variables:
    solution: '**/*.sln'
    project: '**/*.csproj'
    buildPlatform: 'Any CPU'
    buildConfiguration: 'Release'
  
  steps:

    - task: NuGetCommand@2
      inputs:
        restoreSolution: '$(solution)'

    - task: DotNetCoreCLI@2
      inputs:
        command: 'build'
        projects: '$(project)'
        arguments: '--configuration $(buildConfiguration) --framework netcoreapp3.1'
      displayName: 'build netcoreapp3.1 app'

    - task: CopyFiles@2
      inputs:
        sourceFolder: $(Build.SourcesDirectory)/usb64/usb64/bin/$(buildConfiguration)/netcoreapp3.1/
        contents: '**' 
        targetFolder: $(Build.ArtifactStagingDirectory)/usb64/netcoreapp3.1/
        flattenFolders: true
      displayName: 'Copy Application'
      continueOnError: false

    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: 'linux-binaries' 
        publishLocation: 'Container'
      displayName: Publish Build Artifacts
      continueOnError: false
